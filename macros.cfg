
# The following status macros are available:
#    STATUS_READY
#    STATUS_OFF
#    STATUS_BUSY
#    STATUS_HEATING
#    STATUS_LEVELING
#    STATUS_HOMING
#    STATUS_CLEANING
#    STATUS_MESHING
#    STATUS_CALIBRATING_Z
# With additional macros for direct control:
#    SET_NOZZLE_LEDS_ON
#    SET_LOGO_LEDS_OFF
#    SET_NOZZLE_LEDS_OFF

#####################################################################
#	Macros
#####################################################################
[include set_variables.cfg]

[save_variables]
filename: ~/klipper_config/variables.cfg ; variable storage file

#####################################################################
#                          PRINT_START
#####################################################################
[gcode_macro PRINT_START]
gcode:      

     _STATUS_BUSY
    # Parameters
    {% set bed = params.BED|int %}
    {% set hotend = params.HOTEND|int %}
    {% set chamber = params.CHAMBER|default(0)|int %}
    {% set mattype = params.MATTYPE|default(ABS)|string %} 
    {% set nozzle = params.NOZZLE|default(0.4)|float %} 
  
    FIL_SETTINGS MATTYPE={mattype} NOZZLE={nozzle}                                      ; set PA and firmware retraction based on filament type

    G90                                                                                 ; Absolute positioning
    M83                                                                                 ; Relative E distance
    
    _STATUS_HEATING
    M106 S255                                                                           ; Fan max to move air
    M140 S{bed}                                                                         ; heatup bed fast
    M104 S{hotend-40}                                                                   ; preheat hotend, -40 to prevent ooze

    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed-3} MAXIMUM={bed+22}                 ; wait for bed temp

    _STATUS_HOMING
    G28 X                            
    G28 Y                          
    M106 S0                                                                              ; turn off part cooling fan (from heatsoak)

    ATTACH_PROBE_LOCK                                                                    ; attach probe + lock

    G28 Z                                                                                ; home z
    G90                                                                                  ; absolute positioning
    G0 Z20                                                                               ; hop up to prevent knocking probe off after homing Z
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500  ; move to center of bed to prevent knocking probe off after homing Z (otherwise QGL just moves our Z hop down again before traveling)

    _STATUS_MESHING
    LEVEL_BED_ADVANCED MAX_AGE=4                                                         ; probe mesh eventually   

    G28 Z                                                                                ; home z again
    G0 Z20                                                                               ; hop up to prevent knocking probe off after homing Z

    DOCK_PROBE_UNLOCK                                                                    ; stow probe, unlock

    G0 Z5 F3000                                                                          ; Lift Z
    G0 X0 Y0 F8000                                                                       ; Move to the corner
    M106 S0                                                                              ; Turn Fan Off

    _STATUS_HEATING    
    M190 S{bed}                                                                          ; Wait for final bed temp
    M109 S{hotend}                                                                       ; Wait for hotend temp
    
    PRIME_LINE

    _STATUS_PRINTING

#####################################################################
#                          FILAMENT/NOZZLE SETTINGS
#####################################################################
[gcode_macro FIL_SETTINGS]
gcode:
    # Parameters
    {% set mattype = params.MATTYPE|default(ABS)|string %} 
    {% set nozzle = params.NOZZLE|default(0.4)|float %} 
    {% set n_extra_length = 0.0 %} 
    {% set n_extra_pressure_advance = 0.0 %}
    {% set pa_fil = 0.0 %}
    {% set retract_length_fil = 0.0 %}
    {% set unretract_length_fil = 0.0 %}
    {% set retract_speed_fil = 0.0 %}
    {% set unretract_speed_fil = 0.0 %}

    {% if nozzle == 0.8 %}
        {% set n_extra_length = printer["gcode_macro _Set_Variables"].retract_length_8extra|default(0) %}
        {% set n_extra_pressure_advance = printer["gcode_macro _Set_Variables"].n_extra_pa_8|default(0) %}
    {% elif nozzle == 0.6 %}
        {% set n_extra_length = printer["gcode_macro _Set_Variables"].retract_length_6extra|default(0) %}
        {% set n_extra_pressure_advance = printer["gcode_macro _Set_Variables"].n_extra_pa_6|default(0) %}
    {% else %}                                                 #default to 0.4 nozzle settings
        {% set n_extra_length = 0.0 %}
        {% set n_extra_pressure_advance = 0.0 %}
    {% endif %} 

    {% if mattype == 'ABS' %}
        {% set pa_fil = printer["gcode_macro _Set_Variables"].pa_abs|default(0) %}
        {% set retract_length_fil = printer["gcode_macro _Set_Variables"].retract_length_abs|default(0) %}
        {% set unretract_length_fil = printer["gcode_macro _Set_Variables"].unretract_length_abs|default(0) %}
        {% set retract_speed_fil = printer["gcode_macro _Set_Variables"].retract_speed_abs|default(0) %}
        {% set unretract_speed_fil = printer["gcode_macro _Set_Variables"].unretract_speed_abs|default(0) %}
    {% elif mattype == 'PLA' %}
        {% set pa_fil = printer["gcode_macro _Set_Variables"].pa_pla|default(0) %}
        {% set retract_length_fil = printer["gcode_macro _Set_Variables"].retract_length_pla|default(0) %}
        {% set unretract_length_fil = printer["gcode_macro _Set_Variables"].unretract_length_pla|default(0) %}
        {% set retract_speed_fil = printer["gcode_macro _Set_Variables"].retract_speed_pla|default(0) %}
        {% set unretract_speed_fil = printer["gcode_macro _Set_Variables"].unretract_speed_pla|default(0) %}
    {% elif mattype == 'PET' %}
        {% set pa_fil = printer["gcode_macro _Set_Variables"].pa_pet|default(0) %}
        {% set retract_length_fil = printer["gcode_macro _Set_Variables"].retract_length_pet|default(0) %}
        {% set unretract_length_fil = printer["gcode_macro _Set_Variables"].unretract_length_pet|default(0) %}
        {% set retract_speed_fil = printer["gcode_macro _Set_Variables"].retract_speed_pet|default(0) %}
        {% set unretract_speed_fil = printer["gcode_macro _Set_Variables"].unretract_speed_pet|default(0) %}
    {% elif mattype == 'PETG' %}
        {% set pa_fil = printer["gcode_macro _Set_Variables"].pa_petg|default(0) %}
        {% set retract_length_fil = printer["gcode_macro _Set_Variables"].retract_length_petg|default(0) %}
        {% set unretract_length_fil = printer["gcode_macro _Set_Variables"].unretract_length_petg|default(0) %}
        {% set retract_speed_fil = printer["gcode_macro _Set_Variables"].retract_speed_petg|default(0) %}
        {% set unretract_speed_fil = printer["gcode_macro _Set_Variables"].unretract_speed_petg|default(0) %}
    {% elif mattype == 'ASA' %}
        {% set pa_fil = printer["gcode_macro _Set_Variables"].pa_asa|default(0) %}
        {% set retract_length_fil = printer["gcode_macro _Set_Variables"].retract_length_asa|default(0) %}
        {% set unretract_length_fil = printer["gcode_macro _Set_Variables"].unretract_length_asa|default(0) %}
        {% set retract_speed_fil = printer["gcode_macro _Set_Variables"].retract_speed_asa|default(0) %}
        {% set unretract_speed_fil = printer["gcode_macro _Set_Variables"].unretract_speed_asa|default(0) %}
    {% elif mattype == 'FLEX' %}
        {% set pa_fil = printer["gcode_macro _Set_Variables"].pa_flex|default(0) %}
        {% set retract_length_fil = printer["gcode_macro _Set_Variables"].retract_length_flex|default(0) %}
        {% set unretract_length_fil = printer["gcode_macro _Set_Variables"].unretract_length_flex|default(0) %}
        {% set retract_speed_fil = printer["gcode_macro _Set_Variables"].retract_speed_flex|default(0) %}
        {% set unretract_speed_fil = printer["gcode_macro _Set_Variables"].unretract_speed_flex|default(0) %}
    {% else %}
        {% set pa_fil = printer["gcode_macro _Set_Variables"].pa_undef|default(0) %}
        {% set retract_length_fil = printer["gcode_macro _Set_Variables"].retract_length_undef|default(0) %}
        {% set unretract_length_fil = printer["gcode_macro _Set_Variables"].unretract_length_undef|default(0) %}
        {% set retract_speed_fil = printer["gcode_macro _Set_Variables"].retract_speed_undef|default(0) %}
        {% set unretract_speed_fil = printer["gcode_macro _Set_Variables"].unretract_speed_undef|default(0) %}
    {% endif %}

    RESPOND MSG="pa_fil = {pa_fil}"
    RESPOND MSG="retract_length_fil = {retract_length_fil}"
    RESPOND MSG="unretract_length_fil = {unretract_length_fil}"
    RESPOND MSG="retract_speed_fil = {retract_speed_fil}"
    RESPOND MSG="unretract_speed_fil = {unretract_speed_fil}"
    RESPOND MSG="n_extra_length = {n_extra_length}"
    RESPOND MSG="n_extra_pressure_advance = {n_extra_pressure_advance}"

    SET_RETRACTION RETRACT_LENGTH={retract_length_fil} RETRACT_SPEED={retract_speed_fil} UNRETRACT_EXTRA_LENGTH={unretract_length_fil} UNRETRACT_SPEED={unretract_speed_fil}
    SET_PRESSURE_ADVANCE ADVANCE={pa_fil}


#####################################################################
#                          PRIME_LINE
#####################################################################
[gcode_macro PRIME_LINE]
gcode:
    G0 X15 Y0 F8000
    G1 Z0.3 F500                                                                       ; Lower nozzle
    G1 X0 E15 F600                                                                     ; Extrude to prime nozzle
    G1 Z0.5                                                                            ; Lift before print starts to leave ooze behind
   
#####################################################################
#                          PRINT_END
#####################################################################
[gcode_macro PRINT_END]
gcode:
    _STATUS_BUSY
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}

    M400                                                                              ; wait for buffer to clear

    TURN_OFF_HEATERS                                                                  ; turn off all heaters
    M106 S255                                                                         ; max fan to cool down
    G92 E0                                                                            ; zero the extruder
    G1 E-8.0 F3600                                                                    ; retract filament

    G90                                                                               ; absolute positioning
#    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000                                           ; move nozzle to remove stringing
#    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600                         ; park nozzle at rear
    _TOOLHEAD_PARK_PAUSE_CANCEL
    #M84 X Y E                                                                        ; Turn off steppers

    _STATUS_BUSY

#    TIMELAPSE_RENDER                                                                  ; render timelapse while hotend cooling

    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=150                                      ; make sure hotend is at least below 150
    M107                                                                              ; turn off fan
    
    _STATUS_READY
    #  BED_MESH_CLEAR
#    SAVE_IF_SET                                                                       ; SAVE_CONFIG if a mesh was probed in START_PRINT




#####################################################################
#                       LOAD FILAMENT
#####################################################################
[gcode_macro LOAD_FILAMENT]
gcode:
#   M83                            ; set extruder to relative
   G1 E30 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
#   M82                            ; set extruder to absolute
    
#####################################################################
#                       UNLOAD FILAMENT
#####################################################################
[gcode_macro UNLOAD_FILAMENT]
gcode:
#   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-40 F1800                  ; retract some, but not too much or it will jam
#   M82                            ; set extruder to absolute


#####################################################################
#                         CONDITIONAL BED LEVELING
#####################################################################
; MAX_AGE is checked against the stored variable
; SAVE=1 can be used to force saving the mesh (restarts klipper, so
;        only for manual usage)
; FORCE_LEVEL=1 forces a mesh probe even if MAX_AGE is not reached
[gcode_macro LEVEL_BED_ADVANCED]
description: Levels the bed if the last leveling was MAX_AGE runs ago. Force leveling by setting FORCE
variable_save_at_end: 0
gcode:
  {% set max_age = params.MAX_AGE|default(10)|int %}
  {% set force_level = params.FORCE|default(0)|int %}
  {% set save = params.SAVE|default(0)|int %}

  ; load level_age from stored variables
  {% set svv = printer.save_variables.variables %}
  {% if "level_age" not in svv %} ; first run
    SAVE_VARIABLE VARIABLE=level_age VALUE={max_age}
    {% set level_age = 1 %}
  {% else %} ; load level_age and increment
    {% set level_age = svv.level_age %}
    SAVE_VARIABLE VARIABLE=level_age VALUE={level_age|int + 1}
  {% endif %}
  {action_respond_info("Bed mesh age is " + level_age|string) + "."} 

  ; Level eventually
  {% if force_level or (level_age >= max_age|int) %}
    {action_respond_info("Bed mesh exceeded max age. Leveling...")} 

    ; homing if not homed yet
    {% if 'xy' not in printer.toolhead.homed_axes %}
    G28
    {% endif %}
  
    BED_MESH_CALIBRATE
    {% if save %}
      SAVE_VARIABLE VARIABLE=level_age VALUE=1 ; reset counter
      SAVE_CONFIG
    {% else %}
      SET_GCODE_VARIABLE MACRO=LEVEL_BED_ADVANCED VARIABLE=save_at_end VALUE=1
    {% endif %}
  {% else %}
    {action_respond_info("Loading old bed mesh.")} 
    BED_MESH_PROFILE LOAD=default
  {% endif %} 

#####################################################################
#                          SAVE MESH IF SET
#####################################################################
# runs SAVE_CONFIG if the g-code variable was set in start gcode
[gcode_macro SAVE_IF_SET]
gcode:
  {% if printer["gcode_macro LEVEL_BED_ADVANCED"].save_at_end == 1 %}
  {action_respond_info("Saving was requested - saving and restarting now.")}
  SAVE_VARIABLE VARIABLE=level_age VALUE=1
  SAVE_CONFIG
  {% endif %}


#####################################################################
#                          RESET MESH AGE
#####################################################################
[gcode_macro MESH_NEXT_PRINT]
gcode:
  SAVE_VARIABLE VARIABLE=level_age VALUE=10

#####################################################################
#                        HOTEND TEMP WAIT
#####################################################################
[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

#####################################################################
#                        BED TEMP WAIT
#####################################################################
[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

#####################################################################
#                         FORCE Z UP
#####################################################################
[gcode_macro Z_FORCE_UP]
gcode:
    SET_KINEMATIC_POSITION Z=0
    G0 Z50

#####################################################################
#                         FORCE Z DOWN
#####################################################################
[gcode_macro Z_FORCE_DOWN]
gcode:
    SET_KINEMATIC_POSITION Z=50
    G0 Z0

#####################################################################
#                        PARKING ADVANCED
#####################################################################
# Park front center
[gcode_macro PARKFRONT]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500        
    RESTORE_GCODE_STATE NAME=PARKFRONT
    
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT
    
# Park top rear left
[gcode_macro PARKREAR]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKREAR
    G90
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500    
    RESTORE_GCODE_STATE NAME=PARKCENTER
    
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKBED
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500                                     
    RESTORE_GCODE_STATE NAME=PARKBED

#####################################################################
#                       CANCEL PRINT
#####################################################################
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  M106 S0
  _STATUS_ERROR
  CANCEL_PRINT_BASE
#####################################################################
#                        PAUSE PRINT
#####################################################################
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  _STATUS_BUSY
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

#####################################################################
#                        RESUME PRINT
#####################################################################
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  _STATUS_PRINTING
  RESUME_BASE {get_params}

#####################################################################
#                        PARKING FOR PAUSE/CANCEL
#####################################################################
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

#####################################################################
#                          CONDITIONAL HOMING
#####################################################################
[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

#####################################################################
#                       ALIASES/SHORTCUTS 
#####################################################################
    
[gcode_macro BMC]
gcode:
    BED_MESH_CALIBRATE
#####################################################################

#####################################################################
#                            Github Backup
#####################################################################
[gcode_shell_command backup_to_github]
command: sh /home/biqu/git_backup.sh
timeout: 30.
verbose: True

[gcode_macro GITHUB_BACKUP]
gcode:
    RUN_SHELL_COMMAND CMD=backup_to_github